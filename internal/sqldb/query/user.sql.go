// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package query

import (
	"context"
	"database/sql"
)

const getUserByID = `-- name: GetUserByID :one
SELECT id, full_name, birth_date, created_at, updated_at, deleted_at FROM users
WHERE id=$1
`

func (q *Queries) GetUserByID(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.BirthDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const saveUser = `-- name: SaveUser :one
INSERT INTO users (
    id, full_name, birth_date, created_at, updated_at, deleted_at
) VALUES (
    $1, $2, $3, $4, $5, $6
) ON CONFLICT (id) DO UPDATE SET full_name = $2, birth_date = $3, updated_at = NOW()
RETURNING id, full_name, birth_date, created_at, updated_at, deleted_at
`

type SaveUserParams struct {
	ID        string
	FullName  string
	BirthDate sql.NullTime
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
	DeletedAt sql.NullTime
}

func (q *Queries) SaveUser(ctx context.Context, arg SaveUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, saveUser,
		arg.ID,
		arg.FullName,
		arg.BirthDate,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.DeletedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.BirthDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
