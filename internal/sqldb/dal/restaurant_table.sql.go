// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: restaurant_table.sql

package dal

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const deleteRestaurantTables = `-- name: DeleteRestaurantTables :exec
DELETE FROM restaurant_tables
WHERE restaurant_id=$1
`

func (q *Queries) DeleteRestaurantTables(ctx context.Context, restaurantID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteRestaurantTables, restaurantID)
	return err
}

const getRestaurantTables = `-- name: GetRestaurantTables :many
SELECT id, restaurant_id, name, created_at, updated_at FROM restaurant_tables
WHERE restaurant_id=$1
`

func (q *Queries) GetRestaurantTables(ctx context.Context, restaurantID uuid.UUID) ([]RestaurantTable, error) {
	rows, err := q.db.QueryContext(ctx, getRestaurantTables, restaurantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RestaurantTable
	for rows.Next() {
		var i RestaurantTable
		if err := rows.Scan(
			&i.ID,
			&i.RestaurantID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveRestaurantTable = `-- name: SaveRestaurantTable :exec
INSERT INTO restaurant_tables (
    id,
    restaurant_id,
    name,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4, $5
) ON CONFLICT (id, restaurant_id) DO
UPDATE SET
    name=$3,
    updated_at=NOW()
`

type SaveRestaurantTableParams struct {
	ID           uuid.UUID
	RestaurantID uuid.UUID
	Name         string
	CreatedAt    time.Time
	UpdatedAt    time.Time
}

func (q *Queries) SaveRestaurantTable(ctx context.Context, arg SaveRestaurantTableParams) error {
	_, err := q.db.ExecContext(ctx, saveRestaurantTable,
		arg.ID,
		arg.RestaurantID,
		arg.Name,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}
