// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: manager.sql

package dal

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const getManager = `-- name: GetManager :one
SELECT id, full_name, phone_number, created_at, updated_at, deleted_at FROM managers
WHERE id=$1
`

func (q *Queries) GetManager(ctx context.Context, id uuid.UUID) (Manager, error) {
	row := q.db.QueryRowContext(ctx, getManager, id)
	var i Manager
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const saveManager = `-- name: SaveManager :exec
INSERT INTO managers (
    id, full_name, phone_number, created_at, updated_at, deleted_at
) VALUES (
    $1, $2, $3, $4, $5, $6
) ON CONFLICT (id) DO UPDATE SET full_name = $2, phone_number = $3, updated_at = NOW()
`

type SaveManagerParams struct {
	ID          uuid.UUID
	FullName    string
	PhoneNumber string
	CreatedAt   time.Time
	UpdatedAt   time.Time
	DeletedAt   sql.NullTime
}

func (q *Queries) SaveManager(ctx context.Context, arg SaveManagerParams) error {
	_, err := q.db.ExecContext(ctx, saveManager,
		arg.ID,
		arg.FullName,
		arg.PhoneNumber,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.DeletedAt,
	)
	return err
}
