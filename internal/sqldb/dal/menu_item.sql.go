// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: menu_item.sql

package dal

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const getMenuItemByID = `-- name: GetMenuItemByID :one
SELECT id, menu_id, name, description, image_name, price_amount, price_currency, discount_percentage, ingredients, created_at, updated_at FROM menu_items
WHERE id=$1
`

func (q *Queries) GetMenuItemByID(ctx context.Context, id uuid.UUID) (MenuItem, error) {
	row := q.db.QueryRowContext(ctx, getMenuItemByID, id)
	var i MenuItem
	err := row.Scan(
		&i.ID,
		&i.MenuID,
		&i.Name,
		&i.Description,
		&i.ImageName,
		&i.PriceAmount,
		&i.PriceCurrency,
		&i.DiscountPercentage,
		pq.Array(&i.Ingredients),
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMenuItems = `-- name: GetMenuItems :many
SELECT id, menu_id, name, description, image_name, price_amount, price_currency, discount_percentage, ingredients, created_at, updated_at FROM menu_items
WHERE menu_id=$1
`

func (q *Queries) GetMenuItems(ctx context.Context, menuID uuid.UUID) ([]MenuItem, error) {
	rows, err := q.db.QueryContext(ctx, getMenuItems, menuID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MenuItem
	for rows.Next() {
		var i MenuItem
		if err := rows.Scan(
			&i.ID,
			&i.MenuID,
			&i.Name,
			&i.Description,
			&i.ImageName,
			&i.PriceAmount,
			&i.PriceCurrency,
			&i.DiscountPercentage,
			pq.Array(&i.Ingredients),
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveMenuItem = `-- name: SaveMenuItem :exec
INSERT INTO menu_items (
    id,
    menu_id,
    name,
    description,
    image_name,
    price_amount,
    price_currency,
    discount_percentage,
    ingredients,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11 
) ON CONFLICT (id, menu_id) DO
UPDATE SET
    name=$3,
    description=$4,
    image_name=$5,
    price_amount=$6,
    price_currency=$7,
    discount_percentage=$8,
    ingredients=$9,
    updated_at=NOW()
`

type SaveMenuItemParams struct {
	ID                 uuid.UUID
	MenuID             uuid.UUID
	Name               string
	Description        string
	ImageName          sql.NullString
	PriceAmount        float64
	PriceCurrency      string
	DiscountPercentage int16
	Ingredients        []string
	CreatedAt          time.Time
	UpdatedAt          time.Time
}

func (q *Queries) SaveMenuItem(ctx context.Context, arg SaveMenuItemParams) error {
	_, err := q.db.ExecContext(ctx, saveMenuItem,
		arg.ID,
		arg.MenuID,
		arg.Name,
		arg.Description,
		arg.ImageName,
		arg.PriceAmount,
		arg.PriceCurrency,
		arg.DiscountPercentage,
		pq.Array(arg.Ingredients),
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}
