// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: restaurant.sql

package dal

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const getRestaurants = `-- name: GetRestaurants :many
SELECT id, owner_id, name, foundation_year, phone_number, opening_time, closing_time, working_days, created_at, updated_at, deleted_at FROM restaurants
ORDER BY created_at
LIMIT $1 OFFSET $2
`

type GetRestaurantsParams struct {
	Limit  int64
	Offset int64
}

func (q *Queries) GetRestaurants(ctx context.Context, arg GetRestaurantsParams) ([]Restaurant, error) {
	rows, err := q.db.QueryContext(ctx, getRestaurants, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Restaurant
	for rows.Next() {
		var i Restaurant
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.Name,
			&i.FoundationYear,
			&i.PhoneNumber,
			&i.OpeningTime,
			&i.ClosingTime,
			pq.Array(&i.WorkingDays),
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveRestaurant = `-- name: SaveRestaurant :exec
INSERT INTO restaurants (
    id, 
    owner_id, 
    name, 
    foundation_year, 
    phone_number, 
    opening_time, 
    closing_time,
    working_days,
    created_at,
    updated_at,
    deleted_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
) ON CONFLICT (id) DO 
UPDATE SET
    owner_id = $2,
    name = $3,
    foundation_year = $4,
    phone_number = $5,
    opening_time = $6,
    closing_time = $7,
    working_days = $8,
    updated_at = NOW()
`

type SaveRestaurantParams struct {
	ID             uuid.UUID
	OwnerID        uuid.UUID
	Name           string
	FoundationYear sql.NullString
	PhoneNumber    sql.NullString
	OpeningTime    string
	ClosingTime    string
	WorkingDays    []string
	CreatedAt      time.Time
	UpdatedAt      time.Time
	DeletedAt      sql.NullTime
}

func (q *Queries) SaveRestaurant(ctx context.Context, arg SaveRestaurantParams) error {
	_, err := q.db.ExecContext(ctx, saveRestaurant,
		arg.ID,
		arg.OwnerID,
		arg.Name,
		arg.FoundationYear,
		arg.PhoneNumber,
		arg.OpeningTime,
		arg.ClosingTime,
		pq.Array(arg.WorkingDays),
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.DeletedAt,
	)
	return err
}
