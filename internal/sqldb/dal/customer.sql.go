// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: customer.sql

package dal

import (
	"context"
	"database/sql"
)

const getCustomer = `-- name: GetCustomer :one
SELECT id, full_name, birth_date, created_at, updated_at, deleted_at FROM customers
WHERE id=$1
`

func (q *Queries) GetCustomer(ctx context.Context, id string) (Customer, error) {
	row := q.db.QueryRowContext(ctx, getCustomer, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.BirthDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const saveCustomer = `-- name: SaveCustomer :one
INSERT INTO customers (
    id, full_name, birth_date, created_at, updated_at, deleted_at
) VALUES (
    $1, $2, $3, $4, $5, $6
) ON CONFLICT (id) DO UPDATE SET full_name = $2, birth_date = $3, updated_at = NOW()
RETURNING id, full_name, birth_date, created_at, updated_at, deleted_at
`

type SaveCustomerParams struct {
	ID        string
	FullName  string
	BirthDate sql.NullTime
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
	DeletedAt sql.NullTime
}

func (q *Queries) SaveCustomer(ctx context.Context, arg SaveCustomerParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, saveCustomer,
		arg.ID,
		arg.FullName,
		arg.BirthDate,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.DeletedAt,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.BirthDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
