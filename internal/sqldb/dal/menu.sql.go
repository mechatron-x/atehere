// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: menu.sql

package dal

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const getAllMenus = `-- name: GetAllMenus :many
SELECT id, restaurant_id, category, created_at, updated_at, deleted_at FROM menus
WHERE restaurant_id=$1
ORDER BY category
`

func (q *Queries) GetAllMenus(ctx context.Context, restaurantID uuid.UUID) ([]Menu, error) {
	rows, err := q.db.QueryContext(ctx, getAllMenus, restaurantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Menu
	for rows.Next() {
		var i Menu
		if err := rows.Scan(
			&i.ID,
			&i.RestaurantID,
			&i.Category,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMenuByCategory = `-- name: GetMenuByCategory :one
SELECT id, restaurant_id, category, created_at, updated_at, deleted_at FROM menus
WHERE restaurant_id=$1
AND category LIKE $2
`

type GetMenuByCategoryParams struct {
	RestaurantID uuid.UUID
	Category     string
}

func (q *Queries) GetMenuByCategory(ctx context.Context, arg GetMenuByCategoryParams) (Menu, error) {
	row := q.db.QueryRowContext(ctx, getMenuByCategory, arg.RestaurantID, arg.Category)
	var i Menu
	err := row.Scan(
		&i.ID,
		&i.RestaurantID,
		&i.Category,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const saveMenu = `-- name: SaveMenu :exec
INSERT INTO menus (
    id,
    restaurant_id,
    category,
    created_at,
    updated_at,
    deleted_at
) VALUES (
    $1, $2, $3, $4, $5, $6 
) ON CONFLICT (id) DO
UPDATE SET
    restaurant_id = $2,
    category = $3,
    updated_at = NOW()
`

type SaveMenuParams struct {
	ID           uuid.UUID
	RestaurantID uuid.UUID
	Category     string
	CreatedAt    time.Time
	UpdatedAt    time.Time
	DeletedAt    sql.NullTime
}

func (q *Queries) SaveMenu(ctx context.Context, arg SaveMenuParams) error {
	_, err := q.db.ExecContext(ctx, saveMenu,
		arg.ID,
		arg.RestaurantID,
		arg.Category,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.DeletedAt,
	)
	return err
}
